{"version":3,"sources":["../src/plugin_ctrl.js"],"names":["MetricsPanelCtrl","_","MapChart","TopChart","PluginCtrl","$scope","$injector","$rootScope","panelDefaults","pieType","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","strokeWidth","fontSize","combine","threshold","label","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","_mapChart","_topChart","_didRenderThisComponent","render","subItem","series","color","dataList","mapOption","topOption","_parseData","setupOption","updateDataList","map","target","datapoints","targetMatcher","match","targetObj","_parseTargetObjString","value","strObj","obj","trim","s","replace","split","forEach","cell","key","console","error","templateUrl"],"mappings":"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","file":"plugin_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport './dark_theme';\nimport _ from 'lodash';\n\nimport MapChart from './map_chart';\nimport TopChart from './top_chart';\n\nexport class PluginCtrl extends MetricsPanelCtrl {\n\n    constructor($scope, $injector, $rootScope) {\n        super($scope, $injector);\n        this.$rootScope = $rootScope;\n\n        var panelDefaults = {\n            pieType: 'pie',\n            legend: {\n                show: true, // disable/enable legend\n                values: true\n            },\n            links: [],\n            datasource: null,\n            maxDataPoints: 3,\n            interval: null,\n            targets: [{}],\n            cacheTimeout: null,\n            nullPointMode: 'connected',\n            legendType: 'Under graph',\n            aliasColors: {},\n            format: 'short',\n            valueName: 'current',\n            strokeWidth: 1,\n            fontSize: '80%',\n            combine: {\n                threshold: 0.0,\n                label: 'Others'\n            }\n        };\n\n        _.defaults(this.panel, panelDefaults);\n        _.defaults(this.panel.legend, panelDefaults.legend);\n\n        this.events.on('render', this.onRender.bind(this));\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        // this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n        this._mapChart = new MapChart('map-dom');\n        this._topChart = new TopChart('top-dom');\n        this._didRenderThisComponent = false;\n        this.render();\n    }\n\n    setUnitFormat(subItem) {\n\n    }\n\n    changeSeriesColor(series, color) {\n        series.color = color;\n    }\n\n    onDataReceived(dataList) {\n        let mapOption = {},\n            topOption = {};\n        dataList = this._parseData(dataList);\n\n        if (!this._didRenderThisComponent) {\n            mapOption = this._mapChart.setupOption();\n            topOption = this._topChart.setupOption();\n            this._didRenderThisComponent = true;\n        }\n        this._mapChart.updateDataList(mapOption, dataList);\n        this._topChart.updateDataList(topOption, dataList);\n    }\n\n    _parseData(dataList) {\n        return dataList.map(({target, datapoints}) => {\n            const targetMatcher = target.match(/\\{.+}/);\n            if (!targetMatcher) {\n                return;\n            }\n            let targetObj = targetMatcher[0];\n            if (!targetObj) {\n                return;\n            }\n            targetObj = this._parseTargetObjString(targetObj);\n            const value = datapoints[0][0];\n\n            return {targetObj, value};\n        });\n    }\n\n    _parseTargetObjString(strObj) {\n        const obj = {};\n        const trim = s => s.replace(/(^\\s+|\\s+$)/, '');\n        strObj.replace(/(\\{|\\})/g, '').split(',').forEach(cell => {\n            const [key, value] = trim(cell).split(':').map(trim);\n            obj[key] = value;\n        });\n        return obj;\n    }\n\n    onDataError() {\n        console.error(`fail to load database`)\n    }\n\n    onRender() {\n    }\n}\n\nPluginCtrl.templateUrl = 'module.html';\n"]}