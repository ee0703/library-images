{"version":3,"sources":["../src/map_chart.js"],"names":["echarts","china","provinces","registerMap","MapChart","elementId","_elementId","_series","_seriesMap","_legend","data","forEach","cell","find","name","province","value","NaN","push","serieName","serie","type","mapType","roam","showLegendSymbol","itemStyle","normal","label","show","emphasis","borderWidth","borderColor","_clearSerieData","_myChart","init","document","getElementById","orient","left","legend","series","tooltip","trigger","formatter","visualMap","top","text","calculable","max","min","inRange","color","toolbox","option","dataList","targetObj","indexOf","targetKeys","key","sort","filter","targetValues","map","length","join","_updateSerieData","setOption"],"mappings":";;;;;;;;;;;;;;;AAIOA,mB;;AACAC,iB;;AACAC,qB;;;;;;;;;;;;;;;;;;;;;AAEPF,oBAAQG,WAAR,CAAoB,OAApB,EAA6BF,KAA7B;;AAEMG,oB;AAEF,kCAAYC,SAAZ,EAAuB;AAAA;;AACnB,yBAAKC,UAAL,GAAkBD,SAAlB;AACA,yBAAKE,OAAL,GAAe,EAAf;AACA,yBAAKC,UAAL,GAAkB,EAAlB;AACA,yBAAKC,OAAL,GAAe,EAAf;AACH;;;;oDAEeC,I,EAAM;AAClBR,kCAAUS,OAAV,CAAkB,oBAAY;AAC1B,gCAAMC,OAAOF,KAAKG,IAAL,CAAU;AAAA,uCAAQD,KAAKE,IAAL,KAAcC,QAAtB;AAAA,6BAAV,CAAb;AACA,gCAAIH,IAAJ,EAAU;AACNA,qCAAKI,KAAL,GAAaC,GAAb;AACH,6BAFD,MAEO;AACHP,qCAAKQ,IAAL,CAAU;AACNJ,0CAAMC,QADA;AAENC,2CAAOC;AAFD,iCAAV;AAIH;AACJ,yBAVD;AAWH;;;qDAEgBF,Q,EAAUI,S,EAAWH,K,EAAO;AACzC,4BAAII,QAAQ,KAAKZ,UAAL,CAAgBW,SAAhB,CAAZ;AACA,4BAAI,CAACC,KAAL,EAAY;AACRA,oCAAQ;AACJN,sCAAMK,SADF;AAEJE,sCAAM,KAFF;AAGJC,yCAAS,OAHL;AAIJC,sCAAM,KAJF;AAKJC,kDAAkB,KALd;AAMJd,sCAAM,EANF;AAOJe,2CAAW;AACPC,4CAAQ;AACJC,+CAAO,EAACC,MAAM,KAAP;AADH,qCADD;AAIPC,8CAAU;AACNC,qDAAa,CADP;AAENC,qDAAa;AAFP;AAJH;AAPP,6BAAR;AAiBA,iCAAKvB,UAAL,CAAgBW,SAAhB,IAA6BC,KAA7B;AACA,iCAAKb,OAAL,CAAaW,IAAb,CAAkBE,KAAlB;AACA,iCAAKX,OAAL,CAAaC,IAAb,CAAkBQ,IAAlB,CAAuBC,SAAvB;AACA,iCAAKa,eAAL,CAAqBZ,MAAMV,IAA3B;AACH;AACD,4BAAME,OAAOQ,MAAMV,IAAN,CAAWG,IAAX,CAAgB;AAAA,mCAAQD,KAAKE,IAAL,KAAcC,QAAtB;AAAA,yBAAhB,CAAb;AACA,4BAAIH,IAAJ,EAAU;AACNA,iCAAKI,KAAL,GAAaA,KAAb;AACH;AACJ;;;kDAEa;AACV,6BAAKiB,QAAL,GAAgBjC,QAAQkC,IAAR,CAAaC,SAASC,cAAT,CAAwB,KAAK9B,UAA7B,CAAb,EAAuD,MAAvD,CAAhB;AACA,6BAAKG,OAAL,GAAe;AACXmB,kCAAM,IADK;AAEXS,oCAAQ,UAFG;AAGXC,kCAAM,MAHK;AAIX5B,kCAAM;AAJK,yBAAf;AAMA,+BAAO;AACH6B,oCAAQ,KAAK9B,OADV;AAEH+B,oCAAQ,EAFL;;AAIHC,qCAAS;AACLC,yCAAS,MADJ;AAELC,2CAAW;AAFN,6BAJN;AAQHC,uCAAW;AACPN,sCAAM,MADC;AAEPO,qCAAK,QAFE;AAGPC,sCAAM,CAAC,GAAD,EAAM,GAAN,CAHC;AAIPC,4CAAY,IAJL;AAKPC,qCAAK,IALE;AAMPC,qCAAK,GANE;AAOPC,yCAAS;AACLC,2CAAO,CACH,SADG,EAEH,SAFG,EAGH,SAHG,EAIH,SAJG;AADF;AAPF,6BARR;AAwBHC,qCAAS;AACLxB,sCAAM,IADD;AAELS,wCAAQ,UAFH;AAGLC,sCAAM,OAHD;AAILO,qCAAK;AAJA;AAxBN,yBAAP;AA+BH;;;mDAEcQ,M,EAAQC,Q,EAAU;AAAA;;AAC7B,6BAAK/C,OAAL,CAAaI,OAAb,CAAqB;AAAA,mCAAS,MAAKqB,eAAL,CAAqBZ,MAAMV,IAA3B,CAAT;AAAA,yBAArB;AACA4C,iCAAS3C,OAAT,CAAiB,gBAAwB;AAAA,gCAAtB4C,SAAsB,QAAtBA,SAAsB;AAAA,gCAAXvC,KAAW,QAAXA,KAAW;;AACrC,gCAAId,UAAUsD,OAAV,CAAkBD,UAAUxC,QAA5B,KAAyC,CAAC,CAA9C,EAAiD;AAC7C;AACH;AACD,gCAAI0C,aAAa,EAAjB;AACA,iCAAK,IAAMC,GAAX,IAAkBH,SAAlB,EAA6B;AACzBE,2CAAWvC,IAAX,CAAgBwC,GAAhB;AACH;AACDD,yCAAaA,WAAWE,IAAX,GAAkBC,MAAlB,CAAyB;AAAA,uCAAOF,QAAQ,UAAf;AAAA,6BAAzB,CAAb;AACA,gCAAMG,eAAeJ,WAAWK,GAAX,CAAe;AAAA,uCAAOP,UAAUG,GAAV,CAAP;AAAA,6BAAf,CAArB;AACA,gCAAMvC,YAAY0C,aAAaE,MAAb,GAAqB,CAArB,GAAyBF,aAAaG,IAAb,CAAkB,GAAlB,CAAzB,GACZ,MADN;;AAGA,gCAAMjD,WAAWwC,UAAUxC,QAA3B;;AAEA,kCAAKkD,gBAAL,CAAsBlD,QAAtB,EAAgCI,SAAhC,EAA2CH,KAA3C;AACH,yBAhBD;AAiBA,6BAAKP,OAAL,CAAamB,IAAb,GAAoB,KAAKnB,OAAL,CAAaC,IAAb,CAAkBqD,MAAlB,GAA2B,CAA/C;;AAEAV,+BAAOb,MAAP,GAAgB,KAAKjC,OAArB;AACA8C,+BAAOd,MAAP,GAAgB,KAAK9B,OAArB;;AAEA,6BAAKwB,QAAL,CAAciC,SAAd,CAAwBb,MAAxB;AACH;;;;;;+BAGUjD,Q","file":"map_chart.js","sourcesContent":["/**\n * Created by taozeyu on 2017/3/10.\n */\n\nimport echarts from 'app/plugins/pili/echarts';\nimport china from './china';\nimport provinces from './province_in_china';\n\necharts.registerMap('china', china);\n\nclass MapChart {\n\n    constructor(elementId) {\n        this._elementId = elementId;\n        this._series = [];\n        this._seriesMap = {};\n        this._legend = {};\n    }\n\n    _clearSerieData(data) {\n        provinces.forEach(province => {\n            const cell = data.find(cell => cell.name === province);\n            if (cell) {\n                cell.value = NaN;\n            } else {\n                data.push({\n                    name: province,\n                    value: NaN,\n                });\n            }\n        });\n    }\n\n    _updateSerieData(province, serieName, value) {\n        let serie = this._seriesMap[serieName];\n        if (!serie) {\n            serie = {\n                name: serieName,\n                type: 'map',\n                mapType: 'china',\n                roam: false,\n                showLegendSymbol: false,\n                data: [],\n                itemStyle: {\n                    normal: {\n                        label: {show: false},\n                    },\n                    emphasis: {\n                        borderWidth: 1,\n                        borderColor: \"#fff\",\n                    },\n                },\n            };\n            this._seriesMap[serieName] = serie;\n            this._series.push(serie);\n            this._legend.data.push(serieName);\n            this._clearSerieData(serie.data);\n        }\n        const cell = serie.data.find(cell => cell.name === province);\n        if (cell) {\n            cell.value = value;\n        }\n    }\n\n    setupOption() {\n        this._myChart = echarts.init(document.getElementById(this._elementId), 'dark');\n        this._legend = {\n            show: true,\n            orient: \"vertical\",\n            left: \"left\",\n            data: [],\n        };\n        return {\n            legend: this._legend,\n            series: [],\n\n            tooltip: {\n                trigger: 'item',\n                formatter: '{b}<br/>{c}',\n            },\n            visualMap: {\n                left: \"left\",\n                top: \"bottom\",\n                text: [\"高\", \"低\"],\n                calculable: true,\n                max: 1100,\n                min: 300,\n                inRange: {\n                    color: [\n                        \"#0C8918\",\n                        \"#9ED900\",\n                        \"#F05654\",\n                        \"#C91F37\",\n                    ],\n                },\n            },\n            toolbox: {\n                show: true,\n                orient: \"vertical\",\n                left: \"right\",\n                top: \"center\",\n            },\n        };\n    }\n\n    updateDataList(option, dataList) {\n        this._series.forEach(serie => this._clearSerieData(serie.data));\n        dataList.forEach(({targetObj, value}) => {\n            if (provinces.indexOf(targetObj.province) == -1) {\n                return;\n            }\n            let targetKeys = [];\n            for (const key in targetObj) {\n                targetKeys.push(key);\n            }\n            targetKeys = targetKeys.sort().filter(key => key !== 'province');\n            const targetValues = targetKeys.map(key => targetObj[key]);\n            const serieName = targetValues.length >0 ? targetValues.join('-')\n                : 'main';\n\n            const province = targetObj.province;\n\n            this._updateSerieData(province, serieName, value);\n        });\n        this._legend.show = this._legend.data.length > 1;\n\n        option.series = this._series;\n        option.legend = this._legend;\n\n        this._myChart.setOption(option);\n    }\n}\n\nexport default MapChart;"]}